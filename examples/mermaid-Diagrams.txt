%% For MAIN page diagram
---
config:
  layout: elk
---
flowchart TD
 subgraph Init["Initialization"]
    direction LR
        B{"Enable Model Save?"}
        A["Start: run_aan_comprehensive_q_learning<br>(core/trainer.py)"]
        E["Initialize Lineage Registry"]
        C["load_and_seed_population_fixed<br>(data/loader.py)"]
        D["Create ConceptModule(s)<br>(models/arcnet_learner.py)"]
  end
 subgraph Data["Data Prep"]
    direction LR
        G["For each Evolution Step (steps)"]
        F["Convert Data to Tensors<br>(core/trainer.py)"]
  end
 subgraph Train["Training Loop"]
    direction LR
        H2{"training_method"}
        H1["For each Module in Population"]
        L["Q-Learning Update<br>(m.update_q, core/QModule.py)"]
        J["Set m.fitness"]
        I1["compute_fitness_adaptive_complexity_enhanced<br>(evolution/fitness.py)"]
        K["Set m.loss, m.fitness = -m.loss"]
        I2["Gradient Descent (compute_loss + optimizer)<br>(evolution/loss.py)"]
  end
 subgraph QBias["Q-Learning & Bias Detection"]
    direction LR
        O{"Enable Bias Elimination?"}
        N["Bias Detection<br>(monitor_prediction_diversity_with_action, evolution/bias.py)"]
        M["Message Passing<br>(comprehensive_manifold_q_message_passing, core/message.py)"]
        Q["Continue"]
        P["catalyst_bias_elimination<br>(evolution/bias.py)"]
  end
 subgraph Track["Model Tracking"]
    direction LR
        R{"track_best_models?"}
        U["Q-Guided Survival Selection<br>(core/trainer.py)"]
        S["Track Best Models/Stats<br>(core/trainer.py)"]
        T["Skip Tracking"]
  end
 subgraph Repro["Reproduction & Mutation"]
    direction LR
        X["Population Update"]
        W["Q-Experience Inheritance<br>(core/QModule.py)"]
        V["Q-Guided Reproduction &amp; Mutation<br>(mutate, choose_action, models/arcnet_learner.py)"]
  end
 subgraph Lineage["Lineage & Pruning"]
    direction LR
        Y{"enable_lineage_snap?"}
        AB{"Lineage Pruning Needed?"}
        Z["save_lineage_snapshot_to_file<br>(data/loader.py)"]
        AA["Skip Snapshot"]
        AE["Next Step or Finish"]
        AC["Prune Lineage Registry<br>(core/trainer.py)"]
        AD["Continue"]
        AF{"All Steps Done?"}
  end
 subgraph Final["Finalization"]
    direction LR
        AH{"enable_model_save?"}
        AG["Theorem Checks &amp; Final Reporting<br>(core/trainer.py)"]
        AJ["Export (END)<br>- Final population of models<br>- Best model overall"]
        AI["export_best_models<br>(data/loader.py)"]
  end
    A --> B
    B -- Yes, Resume --> C
    C --> E
    B -- No, Fresh --> D
    D --> E
    Init --> Data
    F --> G
    Data --> Train
    H1 --> H2
    H2 -- fitness --> I1
    I1 --> J
    J --> L
    H2 -- loss --> I2
    I2 --> K
    K --> L
    Train --> QBias
    M --> N
    N --> O
    O -- Yes, Needed --> P
    P --> Q
    O -- No/Not Needed --> Q
    QBias --> Track
    R -- Yes --> S
    S --> U
    R -- No --> T
    T --> U
    Track --> Repro
    V --> W
    W --> X
    Repro --> Lineage
    Y -- Yes --> Z
    Z --> AB
    Y -- No --> AA
    AA --> AB
    AB -- Yes --> AC
    AC --> AE
    AB -- No --> AD
    AD --> AE
    AE --> AF
    Lineage -- Yes --> Final
    Lineage -- No --> Data
    AG --> AH
    AH -- Yes --> AI
    AI --> AJ
    AH -- No --> AJ
     A:::main
     B:::main
     C:::main
     E:::main
     D:::main
     F:::main
     G:::main
     H1:::main
     H2:::main
     I1:::main
     I1:::op
     J:::main
     L:::main
     L:::qlearn
     I2:::main
     I2:::op
     K:::main
     M:::main
     N:::main
     N:::bias
     O:::main
     P:::main
     P:::bias
     Q:::main
     R:::main
     S:::main
     S:::track
     U:::main
     U:::track
     T:::main
     V:::main
     V:::repro
     W:::main
     W:::repro
     X:::main
     X:::repro
     Y:::main
     Z:::main
     AB:::main
     AA:::main
     AC:::main
     AC:::prune
     AE:::main
     AD:::main
     AF:::main
     AG:::main
     AG:::theorem
     AH:::main
     AI:::main
     AI:::theorem
     AJ:::main
     AJ:::theorem
    classDef main fill:#333333,stroke:#00796b,stroke-width:3px,color:#FFFFFF
    classDef branch fill:#333333,stroke:#fbc02d,stroke-width:3px
    classDef op fill:#333333,stroke:#f57c00,stroke-width:3px
    classDef qlearn fill:#333333,stroke:#7b1fa2,stroke-width:3px
    classDef bias fill:#333333,stroke:#c62828,stroke-width:3px
    classDef track fill:#333333,stroke:#388e3c,stroke-width:3px
    classDef repro fill:#333333,stroke:#1976d2,stroke-width:3px
    classDef pop fill:#333333,stroke:#827717,stroke-width:3px
    classDef prune fill:#333333,stroke:#5d4037,stroke-width:3px
    classDef theorem fill:#333333,stroke:#ad1457,stroke-width:3px


%% True VERTICAL layout
flowchart TD
%% Initialization
A["Start: run_aan_comprehensive_q_learning<br/>(core/trainer.py)"] --> B{Enable Model Save?}
B -- Yes, Resume --> C["load_and_seed_population_fixed<br/>(data/loader.py)"]
B -- No, Fresh --> D["Create ConceptModule(s)<br/>(models/arcnet_learner.py)"]
C --> E["Initialize Lineage Registry"]
D --> E
E --> F["Convert Data to Tensors<br/>(core/trainer.py)"]
F --> G["For each Evolution Step (steps)"]
G --> H1["For each Module in Population"]
%% Training method branch
H1 --> H2{training_method}
H2 -- "fitness" --> I1["compute_fitness_adaptive_complexity_enhanced<br/>(evolution/fitness.py)"]
H2 -- "loss" --> I2["Gradient Descent (compute_loss + optimizer)<br/>(evolution/loss.py)"]
I1 --> J["Set m.fitness"]
I2 --> K["Set m.loss, m.fitness = -m.loss"]
J --> L
K --> L
%% Q-Learning
L["Q-Learning Update<br/>(m.update_q, core/QModule.py)"] --> M["Message Passing<br/>(comprehensive_manifold_q_message_passing, core/message.py)"]
%% Bias detection
M --> N["Bias Detection<br/>(monitor_prediction_diversity_with_action, evolution/bias.py)"]
N --> O{Enable Bias Elimination?}
O -- Yes, Needed --> P["catalyst_bias_elimination<br/>(evolution/bias.py)"]
O -- No/Not Needed --> Q["Continue"]
P --> Q
%% Tracking
Q --> R{track_best_models?}
R -- Yes --> S["Track Best Models/Stats<br/>(core/trainer.py)"]
R -- No --> T["Skip Tracking"]
S --> U
T --> U
%% Survival selection
U["Q-Guided Survival Selection<br/>(core/trainer.py)"] --> V["Q-Guided Reproduction & Mutation<br/>(mutate, choose_action, models/arcnet_learner.py)"]
V --> W["Q-Experience Inheritance<br/>(core/QModule.py)"]
W --> X["Population Update"]
X --> Y{enable_lineage_snap?}
Y -- Yes --> Z["save_lineage_snapshot_to_file<br/>(data/loader.py)"]
Y -- No --> AA["Skip Snapshot"]
Z --> AB
AA --> AB
AB{Lineage Pruning Needed?}
AB -- Yes --> AC["Prune Lineage Registry<br/>(core/trainer.py)"]
AB -- No --> AD["Continue"]
AC --> AE["Next Step or Finish"]
AD --> AE
AE --> AF{All Steps Done?}
AF -- No --> G
AF -- Yes --> AG["Theorem Checks & Final Reporting<br/>(core/trainer.py)"]
AG --> AH{enable_model_save?}
AH -- Yes --> AI["export_best_models<br/>(data/loader.py)"]
AH -- No --> AJ["Return Results"]
AI --> AJ
AJ["Export (END)
- Final population of models
- Best model overall"]

%% Math/Proof Annotations (as comments)
%% - Fitness/Loss boundedness: I1, I2
%% - Q-learning convergence: L
%% - Manifold message passing: M
%% - Bias elimination theorem: N, P
%% - Survival selection optimality: U
%% - Reproduction diversity: V
%% - Q-knowledge transfer: W
%% - Global convergence: AG

%% Styling for clarity
classDef main fill:#333333,stroke:#00796b,stroke-width:3px;
classDef branch fill:#333333,stroke:#fbc02d,stroke-width:3px;
classDef op fill:#333333,stroke:#f57c00,stroke-width:3px;
classDef qlearn fill:#333333,stroke:#7b1fa2,stroke-width:3px;
classDef bias fill:#333333,stroke:#c62828,stroke-width:3px;
classDef track fill:#333333,stroke:#388e3c,stroke-width:3px;
classDef repro fill:#333333,stroke:#1976d2,stroke-width:3px;
classDef pop fill:#333333,stroke:#827717,stroke-width:3px;
classDef prune fill:#333333,stroke:#5d4037,stroke-width:3px;
classDef theorem fill:#333333,stroke:#ad1457,stroke-width:3px;

linkStyle default stroke:grey, stroke-width:3px


class A,B,C,D,E,F,G,H1,H2,I1,I2,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,AB,AC,AD,AE,AF,AG,AH,AI,AJ main;
class I1,I2 op;
class L qlearn;
class N,P,U bias;
class V,W,X repro;
